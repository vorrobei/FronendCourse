(()=>{"use strict";var t=function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function u(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,u)}c((r=r.apply(t,e||[])).next())}))},e=function(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(u){return function(c){return function(u){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,u[0]&&(s=0)),s;)try{if(n=1,r&&(o=2&u[0]?r.return:u[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,u[1])).done)return o;switch(r=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return s.label++,{value:u[1],done:!1};case 5:s.label++,r=u[1],u=[0];continue;case 7:u=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==u[0]&&2!==u[0])){s=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){s.label=u[1];break}if(6===u[0]&&s.label<o[1]){s.label=o[1],o=u;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(u);break}o[2]&&s.ops.pop(),s.trys.pop();continue}u=e.call(t,s)}catch(t){u=[6,t],r=0}finally{n=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,c])}}},n=function(){function n(t){this._serverURL=t}return n.prototype.Get=function(n){return t(this,void 0,void 0,(function(){var t;return e(this,(function(e){switch(e.label){case 0:return t=this._serverURL+n,[4,fetch(t)];case 1:return[2,e.sent().json()]}}))}))},n.prototype.Post=function(n,r){return t(this,void 0,void 0,(function(){var t;return e(this,(function(e){switch(e.label){case 0:return t=this._serverURL+n,[4,fetch(t,{method:"post",headers:{"Content-Type":"application/json"},body:JSON.stringify(r)})];case 1:return[2,e.sent().json()]}}))}))},n}(),r=function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function u(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,u)}c((r=r.apply(t,e||[])).next())}))},o=function(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(u){return function(c){return function(u){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,u[0]&&(s=0)),s;)try{if(n=1,r&&(o=2&u[0]?r.return:u[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,u[1])).done)return o;switch(r=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return s.label++,{value:u[1],done:!1};case 5:s.label++,r=u[1],u=[0];continue;case 7:u=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==u[0]&&2!==u[0])){s=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){s.label=u[1];break}if(6===u[0]&&s.label<o[1]){s.label=o[1],o=u;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(u);break}o[2]&&s.ops.pop(),s.trys.pop();continue}u=e.call(t,s)}catch(t){u=[6,t],r=0}finally{n=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,c])}}},i=function(){function t(t){this.quizID=0,this.title="",this.author="",this.questionIDs=Array(),this.questions=new Array,this.questionsWithCorrectAnswers=new Array,this._rest=t,this._currentID=-1}return t.prototype.StartQuiz=function(){return this._currentID=-1,this.questionsWithCorrectAnswers=[],!0},t.prototype.GetNextQuestion=function(){return this._currentID<this.questionIDs.length-1?(this._currentID++,this.questions[this._currentID]):null},t.prototype.CheckAnswer=function(t,e){return r(this,void 0,void 0,(function(){var n;return o(this,(function(r){switch(r.label){case 0:return[4,this._rest.Post("/check_answer/",{questionID:t.id,answerID:e.id})];case 1:return(n=r.sent()).isCorrect&&this.questionsWithCorrectAnswers.push(t.id),[2,n]}}))}))},t.prototype.GetScores=function(){return this.questionsWithCorrectAnswers.length},t}(),s=function(){function t(t){this._rest=t}return t.prototype.GetQuizList=function(){return r(this,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return[4,this._rest.Get("/quiz/")];case 1:return[2,t.sent()]}}))}))},t.prototype.GetQuiz=function(t){return r(this,void 0,void 0,(function(){var e,n,r;return o(this,(function(o){switch(o.label){case 0:return[4,this._rest.Get("/quiz/"+t.toString()+"/")];case 1:return e=o.sent(),n=Object.assign(new i(this._rest),e),r=n,[4,this.GetQuizQuestions(n.questionIDs)];case 2:return r.questions=o.sent(),[2,n]}}))}))},t.prototype.GetQuizQuestions=function(t){return r(this,void 0,void 0,(function(){var e,n,r,i;return o(this,(function(o){switch(o.label){case 0:for(e="?",n=0,r=t;n<r.length;n++)i=r[n],e+="id="+i.toString()+"&";return[4,this._rest.Get("/questions"+e)];case 1:return[2,o.sent()]}}))}))},t}(),u=function(t,e,n,r){return new(n||(n=Promise))((function(o,i){function s(t){try{c(r.next(t))}catch(t){i(t)}}function u(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?o(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(s,u)}c((r=r.apply(t,e||[])).next())}))},c=function(t,e){var n,r,o,i,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(u){return function(c){return function(u){if(n)throw new TypeError("Generator is already executing.");for(;i&&(i=0,u[0]&&(s=0)),s;)try{if(n=1,r&&(o=2&u[0]?r.return:u[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,u[1])).done)return o;switch(r=0,o&&(u=[2&u[0],o.value]),u[0]){case 0:case 1:o=u;break;case 4:return s.label++,{value:u[1],done:!1};case 5:s.label++,r=u[1],u=[0];continue;case 7:u=s.ops.pop(),s.trys.pop();continue;default:if(!((o=(o=s.trys).length>0&&o[o.length-1])||6!==u[0]&&2!==u[0])){s=0;continue}if(3===u[0]&&(!o||u[1]>o[0]&&u[1]<o[3])){s.label=u[1];break}if(6===u[0]&&s.label<o[1]){s.label=o[1],o=u;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(u);break}o[2]&&s.ops.pop(),s.trys.pop();continue}u=e.call(t,s)}catch(t){u=[6,t],r=0}finally{n=o=0}if(5&u[0])throw u[1];return{value:u[0]?u[1]:void 0,done:!0}}([u,c])}}},l=function(){function t(t){var e,n,r,o=this;this.formSelector=".quiz-form",this.questionTextContainerSelector=".quiz-form__question-text",this.questionControlsContainerSelector=".question-controls",this.nextButtonSelector=".quiz-controls__button-next",this.formScoresSelector=".quiz-result",this.formScoresTextSelector=".score-container__text",this.playAgainButtonSelector=".quiz-controls__button-play-again",this._form=null,this._questionContainer=null,this._answersContainer=null,this._nextButton=null,this._formScores=null,this._formScoresText=null,this._playAgainButton=null,this._quiz=t,this._form=document.querySelector(this.formSelector),this._formScores=document.querySelector(this.formScoresSelector),null!==this._form&&(this._questionContainer=this._form.querySelector(this.questionTextContainerSelector),this._answersContainer=this._form.querySelector(this.questionControlsContainerSelector),this._nextButton=this._form.querySelector(this.nextButtonSelector),null===(e=this._nextButton)||void 0===e||e.addEventListener("click",(function(t){if(null!==o._form&&null!==o._formScores){var e=o._quiz.GetNextQuestion();null!==e?(o.ShowQuestion(e),o._form.style.display="flex",o._formScores.style.display="none"):(null!==o._formScoresText&&void 0!==o._formScoresText&&(o._formScoresText.innerHTML="Your scored "+o._quiz.GetScores()+" out of "+o._quiz.questionIDs.length),o._form.style.display="none",o._formScores.style.display="flex")}}))),null!==this._formScores&&(this._formScoresText=null===(n=this._formScores)||void 0===n?void 0:n.querySelector(this.formScoresTextSelector),this._playAgainButton=this._formScores.querySelector(this.playAgainButtonSelector),null===(r=this._playAgainButton)||void 0===r||r.addEventListener("click",(function(t){o.StartQuiz()})))}return t.prototype.StartQuiz=function(){var t;this._quiz.StartQuiz(),null===(t=this._nextButton)||void 0===t||t.click()},t.prototype.ShowQuestion=function(t){null!==t&&null!==this._questionContainer&&(this.ClearQuestion(),this.CreateQuestion(t))},t.prototype.CreateQuestion=function(t){var e,n=this,r=document.createElement("span");return r.classList.add("question-text__text"),r.innerHTML=t.text,null===(e=this._questionContainer)||void 0===e||e.appendChild(r),t.answers.forEach((function(e){var r,o=n.CreateAnswerButton(t,e);null===(r=n._answersContainer)||void 0===r||r.appendChild(o)})),r},t.prototype.CreateAnswerButton=function(t,e){var n=this,r=document.createElement("button");return r.type="button",r.classList.add("question-controls__button"),r.id=e.id.toString(),r.innerHTML=e.answer.replace(/</g,"&lt").replace(/>/g,"&gt"),r.addEventListener("click",(function(r){n.ShowAnswerResult(t,e)})),r},t.prototype.ShowAnswerResult=function(t,e){return u(this,void 0,void 0,(function(){var n;return c(this,(function(r){switch(r.label){case 0:return null===this._answersContainer?[2]:[4,this._quiz.CheckAnswer(t,e)];case 1:return n=r.sent(),this._answersContainer.childNodes.forEach((function(t){var r=t;r.disabled=!0,r.id===e.id.toString()&&e.id!==n.correctID&&r.classList.add("question-controls__button_red"),r.id===n.correctID.toString()&&r.classList.add("question-controls__button_green")})),[2]}}))}))},t.prototype.ClearQuestion=function(){if(null!==this._questionContainer&&null!==this._questionContainer.lastChild&&null!==this._answersContainer&&null!==this._answersContainer.lastChild){for(;this._questionContainer.firstChild;)this._questionContainer.removeChild(this._questionContainer.lastChild);for(;this._answersContainer.firstChild;)this._answersContainer.removeChild(this._answersContainer.lastChild)}},t}();!function(){u(this,void 0,void 0,(function(){var t,e,r,o;return c(this,(function(i){switch(i.label){case 0:return t=[1,2],e=Math.floor(Math.random()*t.length+1),r=new n("http://localhost:3034"),[4,new s(r).GetQuiz(e)];case 1:return o=i.sent(),new l(o).StartQuiz(),[2]}}))}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,